/**
 * 
 */
package com.mysecurity.core.validate.code;

import java.io.IOException;
import java.util.HashSet;
import java.util.Set;

import javax.servlet.FilterChain;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.commons.lang.StringUtils;
import org.springframework.beans.factory.InitializingBean;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.web.authentication.AuthenticationFailureHandler;
import org.springframework.social.connect.web.HttpSessionSessionStrategy;
import org.springframework.social.connect.web.SessionStrategy;
import org.springframework.stereotype.Component;
import org.springframework.util.AntPathMatcher;
import org.springframework.web.bind.ServletRequestBindingException;
import org.springframework.web.bind.ServletRequestUtils;
import org.springframework.web.context.request.ServletWebRequest;
import org.springframework.web.filter.OncePerRequestFilter;

import com.mysecurity.core.properties.SecurityProperties;


/**
 * @author Liziyue
 *
 */

//OncePerRequestFilter为工具类 保证filter只会被调用一次
//InitializingBean为了在url被配置后进行处理
@Component("smsCodeFilter")
public class SmsCodeFilter extends OncePerRequestFilter implements InitializingBean{
	
	
	
	private SessionStrategy sessionStrategy = new HttpSessionSessionStrategy();
	
	//接受需要拦截的url
	private Set<String> urls = new HashSet<String>();
	
	@Autowired
	private SecurityProperties securityProperties;
	
	//工具类
	private AntPathMatcher pathMatcher = new AntPathMatcher();
	
	//InitializingBean方法
	@Override
	public void afterPropertiesSet() throws ServletException {		
		super.afterPropertiesSet();
		//将传入的url通过,分割
		String configUrls[] = StringUtils.splitByWholeSeparatorPreserveAllTokens(securityProperties.getCode().getSmsCodeProperties().getUrl(), ",");
		for(String configUrl:configUrls) {
			//循环数组加入集合中
			urls.add(configUrl);
		}
		//登录请求也必须加入
		urls.add("/authentication/mobile");
	}
	
	
	
	
	/**
	 * 验证码校验失败处理器
	 */
	@Autowired
	private AuthenticationFailureHandler authenticationFailureHandler;
	
	
	@Override
	protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response, FilterChain filterchain)
			throws ServletException, IOException {
		
		
		boolean action = false;
		for(String url:urls) {
			//request.getRequestURI()表示请求的url  这个整个是判断如果输入栏输入的地址能和用户配置的url匹配上则继续往下处理
			if(pathMatcher.match(url, request.getRequestURI())) {
				action = true;
			}
		}
		
		if(action){
			
			//开始校验
			try {
				validate(new ServletWebRequest(request));
			} catch (ValidateCodeException e) {	
				//返回错误异常
				authenticationFailureHandler.onAuthenticationFailure(request, response, e);
				return;
			}
			
		}
		filterchain.doFilter(request, response);
	}
	
	
	public void validate(ServletWebRequest request) throws ServletRequestBindingException {
		
		//从session里面拿出之前放的imagecode
		ValidateCode codeInSession = (ValidateCode) sessionStrategy.getAttribute(request, ValidateCodeProcessor.SESSION_KEY_PREFIX+"SMS");
		
		//从请求里拿到imagecode参数     就是前台页面里输入的name="imagecode"的值
		String codeInRequest = ServletRequestUtils.getStringParameter(request.getRequest(), "smsCode");
				
		if (StringUtils.isBlank(codeInRequest)) {
			throw new ValidateCodeException("验证码的值不能为空");
		}

		if (codeInSession == null) {
			throw new ValidateCodeException("验证码不存在");
		}

		if (codeInSession.isExpried()) {
			//移除session
			sessionStrategy.removeAttribute(request,ValidateCodeProcessor.SESSION_KEY_PREFIX+"SMS");
			throw new ValidateCodeException("验证码已过期");
		}
		
		//比对session和用户填的是否一致
		if (!StringUtils.equals(codeInSession.getCode(), codeInRequest)) {
			throw new ValidateCodeException("验证码不匹配");
		}

		sessionStrategy.removeAttribute(request, ValidateCodeProcessor.SESSION_KEY_PREFIX+"SMS");
	}


	public SessionStrategy getSessionStrategy() {
		return sessionStrategy;
	}


	public void setSessionStrategy(SessionStrategy sessionStrategy) {
		this.sessionStrategy = sessionStrategy;
	}


	public AuthenticationFailureHandler getAuthenticationFailureHandler() {
		return authenticationFailureHandler;
	}


	public void setAuthenticationFailureHandler(AuthenticationFailureHandler authenticationFailureHandler) {
		this.authenticationFailureHandler = authenticationFailureHandler;
	}


	public SecurityProperties getSecurityProperties() {
		return securityProperties;
	}


	public void setSecurityProperties(SecurityProperties securityProperties) {
		this.securityProperties = securityProperties;
	}
	
	
}
