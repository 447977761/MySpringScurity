/**
 * 
 */
package com.mysecurity.core.validate.code;

import java.io.IOException;
import java.util.HashMap;

import java.util.Map;
import java.util.Set;

import javax.servlet.FilterChain;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.commons.lang.StringUtils;
import org.springframework.beans.factory.InitializingBean;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.web.authentication.AuthenticationFailureHandler;
import org.springframework.social.connect.web.HttpSessionSessionStrategy;
import org.springframework.social.connect.web.SessionStrategy;
import org.springframework.stereotype.Component;
import org.springframework.util.AntPathMatcher;


import org.springframework.web.context.request.ServletWebRequest;
import org.springframework.web.filter.OncePerRequestFilter;

import com.mysecurity.core.properties.SecurityConstants;
import com.mysecurity.core.properties.SecurityProperties;


/**
 * @author Liziyue
 *
 */

//OncePerRequestFilter为工具类 保证filter只会被调用一次
//InitializingBean为了在url被配置后进行处理
@Component("validateCodeFilter")
public class ValidateCodeFilter extends OncePerRequestFilter implements InitializingBean{
	
	/**
	 * 验证码校验失败处理器
	 */
	@Autowired
	private AuthenticationFailureHandler authenticationFailureHandler;
	
	
	/**
	 * 系统中校验码处理器
	 */
	private ValidateCodeProcessorHolder validateCodeProcessorHolder;
	
	
	
	
	
	/**
	 * 存放需要拦截的url
	 */
	private Map<String,ValidateCodeType> urlMap = new HashMap<String,ValidateCodeType>();
	
	/**
	 * 系统配置信息
	 */
	@Autowired
	private SecurityProperties securityProperties;
	
	
	/**
	 * 检验请求url与配置url是否匹配类
	 */
	private AntPathMatcher pathMatcher = new AntPathMatcher();
	
	//InitializingBean方法
	@Override
	public void afterPropertiesSet() throws ServletException {		
		super.afterPropertiesSet();
		urlMap.put(SecurityConstants.DEFAULT_LOGIN_PROCESSING_URL_FORM, ValidateCodeType.IMAGE);
		addUrlToMap(securityProperties.getCode().getImageCodeProperties().getUrl(),ValidateCodeType.IMAGE);
		
		urlMap.put(SecurityConstants.DEFAULT_LOGIN_PROCESSING_URL_MOBILE, ValidateCodeType.SMS);
		addUrlToMap(securityProperties.getCode().getSmsCodeProperties().getUrl(),ValidateCodeType.SMS);
	}
	
	
	protected void addUrlToMap(String urlString,ValidateCodeType type) {
		if(StringUtils.isBlank(urlString)) {
			String urls[] = StringUtils.splitByWholeSeparatorPreserveAllTokens(urlString, ",");
			for(String url:urls) {
				urlMap.put(url, type);
			}
		}
	}
	
	
	
	@Override
	protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response, FilterChain filterchain)
			throws ServletException, IOException {
		
		ValidateCodeType type = getValidateCodeType(request);
		if(type != null) {
			logger.info("校验请求("+request.getRequestURI()+")中的验证码，验证码类型"+type);
		
			validateCodeProcessorHolder.findValidateCodeProcessor(type)
									.validate(new ServletWebRequest(request,response));
		
		
		}
	}
	
	



	/**
	 * 获取校验码的类型，如果当前请求不需要校验，则返回null
	 * 
	 * @param request
	 * @return
	 */
	private ValidateCodeType getValidateCodeType(HttpServletRequest request) {
		ValidateCodeType result = null;
		if (!StringUtils.equalsIgnoreCase(request.getMethod(), "get")) {
			Set<String> urls = urlMap.keySet();
			for (String url : urls) {
				if (pathMatcher.match(url, request.getRequestURI())) {
					result = urlMap.get(url);
				}
			}
		}
		return result;
	}
	
	

	
}
